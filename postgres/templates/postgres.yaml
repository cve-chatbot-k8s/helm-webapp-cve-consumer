apiVersion: v1
kind: Service
metadata:
  name: postgres-svc
  labels:
    app: postgres
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: postgres
    meta.helm.sh/release-namespace: webapp
spec:
  ports:
    - port: 5432
      name: db
  clusterIP: None
  selector:
    app: postgres
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  labels:
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: postgres
    meta.helm.sh/release-namespace: webapp
    sidecar.istio.io/inject: "false"
spec:
  selector:
    matchLabels:
      app: postgres
      role: db
  serviceName: postgres-svc
  replicas: 1
  minReadySeconds: 10
  template:
    metadata:
      labels:
        app: postgres
        role: db
    spec:
      serviceAccountName: postgres-sa
      terminationGracePeriodSeconds: 10
      containers:
        - name: postgres-container
          image: postgres:14
          ports:
            - containerPort: 5432
              name: db
          envFrom:
            - secretRef:
                name: postgres-credentials
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata/pgdata
          resources: # Define resource requests and limits here
            requests:
              cpu: "100m"
              memory: "500Mi"
            limits:
              cpu: "1000m"
              memory: "1000Mi"
  volumeClaimTemplates:
    - metadata:
        name: postgres-storage
        labels:
          app.kubernetes.io/managed-by: Helm
        annotations:
          meta.helm.sh/release-name: postgres
          meta.helm.sh/release-namespace: webapp
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: "ebs-csi-encrypted"
        resources:
          requests:
            storage: 8Gi
