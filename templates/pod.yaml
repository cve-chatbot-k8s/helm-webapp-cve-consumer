apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-app"
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Release.Name }}
spec:
  replicas: 2
  minReadySeconds: 30
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      imagePullSecrets:
        - name: regcred
      initContainers:
            - name: db-migration
              image: "{{ .Values.initContainerImage.repository }}{{ .Values.initContainerImage.name }}:{{ .Values.initContainerImage.tag }}"
              imagePullPolicy: {{ .Values.initContainerImage.pullPolicy }}
              command: [ "/bin/sh", "-c" ]
              args:
                - |
                  sleep 20
                  flyway migrate
              env:
                - name: DB_HOST
                  value: jdbc:postgresql://postgres-svc.{{ .Values.namespace }}.svc.cluster.local
                - name: DB_PORT
                  value: {{ .Values.postgresql.port | quote }}
                - name: DB_DATABASE
                  value: {{ .Values.postgresql.database | quote }}
                - name: DB_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: "{{ .Release.Name }}-db-secret"
                      key: DB_USERNAME
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "{{ .Release.Name }}-db-secret"
                      key: DB_PASSWORD
                - name: FLYWAY_URL
                  value: jdbc:postgresql://postgres-svc.{{ .Values.namespace }}.svc.cluster.local:{{ .Values.postgresql.port }}/{{ .Values.postgresql.database }}
                - name: FLYWAY_USER
                  value: {{ .Values.secret.username | quote }}
                - name: FLYWAY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "{{ .Release.Name }}-db-secret"
                      key: FLYWAY_PASSWORD
                - name: FLYWAY_LOCATIONS
                  value: {{ .Values.flyway.locations | quote }}
      containers:
            - name: webapp-consumer
              image: "{{ .Values.image.repository }}{{ .Values.image.name }}:{{ .Values.image.tag }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              ports:
                - containerPort: 3000
              env:
                - name: DB_HOST
                  value: postgres-svc.{{ .Values.namespace }}.svc.cluster.local
                - name: DB_PORT
                  value: {{ .Values.postgresql.port | quote }}
                - name: DB_DATABASE
                  value: {{ .Values.postgresql.database | quote }}
                - name: DB_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: "{{ .Release.Name }}-db-secret"
                      key: DB_USERNAME
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "{{ .Release.Name }}-db-secret"
                      key: DB_PASSWORD
                - name: KAFKA_BOOTSTRAP_SERVERS
                  value: {{ .Values.kafka.bootstrapServers | quote }}
                - name : KAFKA_TOPIC
                  value: {{ .Values.kafka.topic | quote }}
                - name: DB_HEALTH_URL
                  value: {{ .Values.dbHealthUrl | quote }}
                - name: PORT
                  value: {{ .Values.port | quote }}
              resources:
                requests:
                  memory: "2Gi"
                  cpu: "1"
                limits:
                  memory: "3.5Gi"
                  cpu: "2"
              livenessProbe:
                httpGet:
                  path: /healthz
                  port: 3000
                initialDelaySeconds: 10
                periodSeconds: 10
                failureThreshold: 5
                timeoutSeconds: 2
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -c
                    - /usr/local/bin/readiness-probe.sh
                initialDelaySeconds: 10
                periodSeconds: 10
                failureThreshold: 5
                timeoutSeconds: 2

      restartPolicy: Always